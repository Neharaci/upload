import tensorflow as tf
import numpy as np

# True parameters
m_true = 8.0
c_true = 12.0

# Generate synthetic data: y = m_true * X + c_true + noise
X = np.linspace(0, 15, 200)
noise = np.random.normal(0, 3, X.shape)
y = m_true * X + c_true + noise

# Build a simple linear model: y = wx + b
model = tf.keras.Sequential([
    tf.keras.layers.Dense(1, input_shape=(1,))
])

# Compile model with optimizer and loss function
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model silently for 100 epochs
model.fit(X, y, epochs=100, verbose=0)

# Get learned weights: slope (w) and intercept (b)
w, b = model.layers[0].get_weights()

print(f"True slope: {m_true:.2f}, True intercept: {c_true:.2f}")
print(f"Learned slope: {w[0][0]:.2f}, Learned intercept: {b[0]:.2f}")

# Test prediction for x=20
x_test = np.array([[20.0]])
y_pred = model.predict(x_test)
print(f"Prediction for x={x_test[0][0]} â†’ y={y_pred[0][0]:.2f}")
